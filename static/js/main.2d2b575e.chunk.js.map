{"version":3,"sources":["Auth.js","Router.js","App.js","registerServiceWorker.js","index.js"],"names":["GetUser","fromStorage","JSON","parse","localStorage","getItem","user","role","Authorization","allowedRoles","wrappedComponent","_Component","withAuth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","_ref","includes","isValidRole","react_default","a","createElement","join","Component","Admin","User","Navigation","style","display","justifyContent","react_router_dom","to","HomeComponent","AdminComponent","UserComponent","MainRouter","react","Router_Navigation","react_router","path","component","exact","App","Router","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2d2b575e.chunk.js","sourcesContent":["import React, {Component} from 'react';\n/**\n * Get User from Local Storage\n * https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API\n * @return {obeject} UserData\n * {\n *  username: string,\n *  role: string\n * }\n */\nconst GetUser = () => {\n    const fromStorage = JSON.parse(localStorage.getItem(\"user\"));\n    return !!fromStorage ? fromStorage : {user: '', role: 'guest'};\n}\n\n/**\n * Checking role its valid\n * @param {object}\n * {\n *   role: string,\n *   allowedRoles: array,\n * }\n * @return {boolean} \n */\nconst isValidRole = ({role, allowedRoles}) => allowedRoles.includes(role);\n\n/**\n * Authorization (High Order Component Concept)\n * @param {array} allowedRoles\n * @param {object} WrappedComponent\n * @return {object} React.Component\n *\n * Example:\n *    # set AllowedRoles with Component\n *    const AuthComponent = Authorization(['user','admin','superman'])(MyComponent)\n *\n *    # set AllowedRoles without Component\n *    const AuthHOC = Authorization(['user','admin','superman'])\n *    const MyComponent = () => <h1> Hello </h1>\n *    const AuthComponent = AuthHOC(MyComponent);\n *\n *    ReactDOM.render( <AuthComponent/>, target);\n */\nconst Authorization = allowedRoles => wrappedComponent => class withAuth extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            user: GetUser(), // state user assign value from GetUser function\n        }\n    }        \n    \n    render(){\n        const {role} = this.state.user;\n        return isValidRole({role: role, allowedRoles: allowedRoles}) ?\n            <wrappedComponent/>:\n            <h1> Hai! kamu tidak boleh masuk dihalaman ini, rasakan chidorii ini - regards {allowedRoles.join(', ')}</h1>\n    }\n}\n\n\n/**\n * define administrator role\n * use: Admin(<Component/>)\n */\nexport const Admin = Authorization(['admin']);\n\n/**\n * define user role\n * use: User(<Component/>)\n */\nexport const User = Authorization(['admin','user']);\n\nexport default {\n    Admin,\n    User,\n}\n","import React, {Fragment} from 'react';\nimport { \n    BrowserRouter as Router, \n    Route, \n    Link\n} from \"react-router-dom\";\n\nimport {Admin, User} from './Auth';\n\nconst Navigation = () => (\n    <ul style={{display: \"flex\", justifyContent: \"space-around\" }}>\n        <li><Link to=\"/\"> Home </Link></li>\n        <li><Link to=\"/admin\"> Admin Page </Link></li>\n        <li><Link to=\"/user\"> User Page </Link></li>\n    </ul>\n);\n\nconst HomeComponent = () => (\n    <h1>Selamat datang</h1>\n);\n\nconst AdminComponent = () => (\n    <h1>Hai Admin, Kamu cantik deh!</h1>\n);\n\nconst UserComponent = () => (\n    <h1>Hai user, Jomblo kan!</h1>\n);\n\nconst MainRouter = () => (\n    <Router>\n        <Fragment>\n            <Navigation/>\n            <Route path=\"/\" component={HomeComponent} exact={true} />\n            <Route path=\"/admin\" component={Admin(AdminComponent)} />\n            <Route path=\"/user\" component={User(UserComponent)} />\n        </Fragment>\n    </Router>\n);\n\nexport default MainRouter;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport Routers from './Router';\n\nclass App extends Component {\n  render() {\n    return <Routers/>;\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}